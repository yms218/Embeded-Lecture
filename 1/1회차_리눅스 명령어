ls(list) 파랑색 = 폴더
ls -a .흰색 = 파일
ls -al 권한(시스템 프로그래밍)
초록색 : 실행파
mkdir 폴더만들기 
cd(change directory)
pwd(passward) 현재위치
cd.. 상위 디렉토리
현재 위치에서 어딘가로 가겠다 - 상대 경로
최상위부터 어디까지 가겠다 - 절대 경로
cd /home/jiyoung/c


vi 에디터는 1. 명령모드 : 밑에 글자없을 때 
           2. 입력모드 : 밑에 글자있을 때
vi i혹은 a (insert모드) esc 누르면 사라짐
esc :q!
yy한줄복사 p붙여넣기 u은 되돌리기 ctrl + r은 거꾸로 되돌리기
y10y 열줄복사
v : 비주얼 키보드로 드래그 후 y p붙여넣기
dd한줄삭제(복사) 잘라내기 형식 p붙여넣기
d8d : 8줄 삭제
:%s /바꿀대상/무엇으로바꿀껀지/g : 특정한 문자 치환 (/g 해당 조건 빠짐없이 전부)
:vs : 좌 분할우
:sp : 위아래 분할
ctrl WW : 커서 이동
:q  분할창 나가기
:q! 강제종료 
리눅스상에서는 int main(void)로
vi print_test.c 
:wq(write quit)
컴파일러 gcc
gcc print_test.c
a.out이 생성됨
. : 자기자신
./a.out 실행
ls /bin/ | grep ls
가장 최상위 디렉토리는 맨앞에 /는 디렉토리로 판정 cd /home/koitt....
ls /bin 이 정보를 | 파이프를 통해서 보낸다 grep한테 
grep(내가 찾고 싶은 문자열) ls를 찾아라
bin은 binary 디렉토리 시스템에서 사용하는 실행파일들 등록되있기 때문에 ls는 경로에 상관없이 쓸수 있다.
cp(copy) 복사하는 명령어
cp a.out /bin/ 치면 허가거부나옴
시스템에서 사용하는 명령어는 아무나 건드릴 수 없음
sudo cp a.out /bin/을 누르면 허가됨 
sudo : 강제적으로 너에게 root의 권한 = 관리자 권한을 주겠다.
이제 ./a.out안해도 되고 a.out해도됨
rm : 삭제 명령어는 -rf를 붙여야함
rm -rf를 잘못쓰면 컴퓨터가 완전히 날아감 반드시 ls로 경로까지 확인 후 적용
rm -rf a.out
sudo rm -rf /bin/a.out
mv 바꿀대상 바꿀려는이름 : 이름 바꾸고 싶을 때
sudo mv a.out /bin/
ls /bin/ | grep a.out
mv : 데이터 자체를 이동시킬수도 있다.(잘라내기) 복사 붙여넣기

gcc 컴파일할 파일이름 -o 실행파일 이름
gdb printf(실행파일) : (no debugging symbols found) debugging 심볼이 없으면 소스코드를 볼수 없다
q누르면 나갈수 있다.
gcc -g printf_test.c -o printf
gdb printf
b main(main에 breaking point를 걸겠다) : main시작전
r(run) 실행
l을 누르면 소스코드가 보임
disas (c언어가 어셈블리어로 바뀜) 지금보는건 x86 아키텍쳐 intel꺼 고성능 스트리밍, 군사용 x86사용 
아니라면 ARM사용 이걸하면 구조체, 포인터, 배열 끝남 = 메모리라는 사실을 알수 있음. 기계어에는 변수가 없고
메모리 밖에 없다.
=> 이 화살표는 breaking point
b *0x0000000000400526 이 주소에 breaking point로 근데 이미 지나갔으므로 앞으로 breaking point로 
r누르고 y disas 누르면 주소 앞으로가짐
q enter y하면 나가짐
:!를 이용하면 vi에디터 안에서도 할 수 있다.
cat printf_test2.c를 이용하면 안에 내용물을 확인할 수 있다.

c언어 정수가 default 소수점은 double이 default (별도의 지시어가 없으면)
float이라는 것은 맨 마지막에 f를 붙여야함 
float 은 %f double은 %lf

c언어에서 ^는 xor이다
0x20 십진수로 32로 xor로 했더니 65와 97을 왔다갔다한다.
대소문자는 xor을 통해서 서로 바꿀 수 있다.

변수? 데이터를 담을 메모리 공간
data type : int, float, double, char 
float num2 - 3.3f or (float)3.3
double num3 = 7.7f(flaot으로 강제형변환) 

포인터? 주소를 저장하는 변수
함수포인터? 함수의 주소를 저장하는 변수
가상메모리(펌웨어는 가상메모리 개념 x, Cortex-A(휴대폰, 네비게이션, 초인종), x86)
(linux, windows, mac은 가상메모리)
--------------------
stack : 지역변수{} 저장
--------------------
heap : 동적할당 malloc, calloc (별도의 다른공간) -> 따로 공간 포인터만 있으면 접근가능
--------------------
data : 전역변수, 정적변수 함수안에다 static 설정하면 해당함수안에서만 전역변수로 static 붙이면 배열리턴됨
       int(*test)[2]
	{
	}인트형 배열 2개를 return
--------------------
text : 기계어가 배치되는 주소
--------------------

%% : %를 출력함
65는 2의 6승 + 1
97는 2의 6승 + 2의 5승 + 1
32는 2의 5승
65 01000001
32 00100000 xor
97 01100001

!gcc -D__SPECIAL__ func_test.c -o func_test
D(define) Special이 있으면 
#if 1 
#if 0 이중주석으로 문제가 생기는 경우가 없다.
#endif

일반적으로 쉬프트 연산자는 정수만
쉬프트 << 곱하기 2
>> 나눳을때 소수점 버림

문제: 1,2,3,4라는 숫자를 변수에 저장하고 이를 함수에 전달하여 숫자 10을 반환받아 출력해본다
내답:
#include <stdio.h>

int mult(int a, int b, int c, int d)
{
	return a+b+c+d;
}	

int mult2(int *num)
{
	int i, temp = 0;
	for(i = 0; i<4; i++)
		temp += num[i];
	return temp;
}

int main(void)
{
	int a,b,c,d;
	int arr[5] = {1,2,3,4};
	a = 1; b = 2; c = 3; d = 4;
	printf("a+b+c+d = %d\n", mult(a,b,c,d));
	printf("a+b+c+d = %d\n"m mult2(arr));
	return 0;
}

내일할꺼 : 
cp function_test.c debug.c 이름만 바꿔서 그대로 복사
gcc -g debug.c -o debug

info reg 레지스터 rax cpu가 연산을 위해 사용하는 레지스터 gp레지스터

포인터의 크기? rsp(스택전용 레지스터) : 스택의 주소 = 가상메모리 크기의 최대치 
32bit 운영체제 가상메모리의 크기는 4GB
64bit 운영체제 가상메모리의 크기는 16EB = 2의 64승
2의 32승 = 2의2승 * 2의10승 * 2의10승 * 2의10승
CISC instruction(intel) 가변 push 1바이트, mov 3바이트 가변 메모리가 레지스터로 갈수있다. 메모리 -> 메모리 가능
ARM 절대불변 4바이트 RISC load,store 아키텍쳐 메모리->메모리 x 
load : 메모리에있는 값을 레지스터로 올림
store : 레지스터에 있는 값을 메모리로 작업량은 intel보다 많음

노트 챙겨오기
breaking point 가장 위쪽에 잡는거 연습


























